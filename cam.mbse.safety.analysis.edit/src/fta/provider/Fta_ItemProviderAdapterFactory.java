/**
 */
package fta.provider;

import fta.util.Fta_AdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Fta_ItemProviderAdapterFactory extends Fta_AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Fta_ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.FTAPackage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FTAPackageItemProvider ftaPackageItemProvider;

	/**
	 * This creates an adapter for a {@link fta.FTAPackage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFTAPackageAdapter() {
		if (ftaPackageItemProvider == null) {
			ftaPackageItemProvider = new FTAPackageItemProvider(this);
		}

		return ftaPackageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.FTAPackageInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FTAPackageInterfaceItemProvider ftaPackageInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link fta.FTAPackageInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFTAPackageInterfaceAdapter() {
		if (ftaPackageInterfaceItemProvider == null) {
			ftaPackageInterfaceItemProvider = new FTAPackageInterfaceItemProvider(this);
		}

		return ftaPackageInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.ComponentPackageBinding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentPackageBindingItemProvider componentPackageBindingItemProvider;

	/**
	 * This creates an adapter for a {@link fta.ComponentPackageBinding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentPackageBindingAdapter() {
		if (componentPackageBindingItemProvider == null) {
			componentPackageBindingItemProvider = new ComponentPackageBindingItemProvider(this);
		}

		return componentPackageBindingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.Gate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GateItemProvider gateItemProvider;

	/**
	 * This creates an adapter for a {@link fta.Gate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGateAdapter() {
		if (gateItemProvider == null) {
			gateItemProvider = new GateItemProvider(this);
		}

		return gateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.ANDGate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ANDGateItemProvider andGateItemProvider;

	/**
	 * This creates an adapter for a {@link fta.ANDGate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createANDGateAdapter() {
		if (andGateItemProvider == null) {
			andGateItemProvider = new ANDGateItemProvider(this);
		}

		return andGateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.ORGate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ORGateItemProvider orGateItemProvider;

	/**
	 * This creates an adapter for a {@link fta.ORGate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createORGateAdapter() {
		if (orGateItemProvider == null) {
			orGateItemProvider = new ORGateItemProvider(this);
		}

		return orGateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.InibitGate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InibitGateItemProvider inibitGateItemProvider;

	/**
	 * This creates an adapter for a {@link fta.InibitGate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInibitGateAdapter() {
		if (inibitGateItemProvider == null) {
			inibitGateItemProvider = new InibitGateItemProvider(this);
		}

		return inibitGateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.Subtree} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SubtreeItemProvider subtreeItemProvider;

	/**
	 * This creates an adapter for a {@link fta.Subtree}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSubtreeAdapter() {
		if (subtreeItemProvider == null) {
			subtreeItemProvider = new SubtreeItemProvider(this);
		}

		return subtreeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.InTriangle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InTriangleItemProvider inTriangleItemProvider;

	/**
	 * This creates an adapter for a {@link fta.InTriangle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInTriangleAdapter() {
		if (inTriangleItemProvider == null) {
			inTriangleItemProvider = new InTriangleItemProvider(this);
		}

		return inTriangleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.OutTriangle} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutTriangleItemProvider outTriangleItemProvider;

	/**
	 * This creates an adapter for a {@link fta.OutTriangle}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutTriangleAdapter() {
		if (outTriangleItemProvider == null) {
			outTriangleItemProvider = new OutTriangleItemProvider(this);
		}

		return outTriangleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.Event} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventItemProvider eventItemProvider;

	/**
	 * This creates an adapter for a {@link fta.Event}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventAdapter() {
		if (eventItemProvider == null) {
			eventItemProvider = new EventItemProvider(this);
		}

		return eventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.TopEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TopEventItemProvider topEventItemProvider;

	/**
	 * This creates an adapter for a {@link fta.TopEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTopEventAdapter() {
		if (topEventItemProvider == null) {
			topEventItemProvider = new TopEventItemProvider(this);
		}

		return topEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.ConditioningEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditioningEventItemProvider conditioningEventItemProvider;

	/**
	 * This creates an adapter for a {@link fta.ConditioningEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditioningEventAdapter() {
		if (conditioningEventItemProvider == null) {
			conditioningEventItemProvider = new ConditioningEventItemProvider(this);
		}

		return conditioningEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.ExternalEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExternalEventItemProvider externalEventItemProvider;

	/**
	 * This creates an adapter for a {@link fta.ExternalEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExternalEventAdapter() {
		if (externalEventItemProvider == null) {
			externalEventItemProvider = new ExternalEventItemProvider(this);
		}

		return externalEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.BasicEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BasicEventItemProvider basicEventItemProvider;

	/**
	 * This creates an adapter for a {@link fta.BasicEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBasicEventAdapter() {
		if (basicEventItemProvider == null) {
			basicEventItemProvider = new BasicEventItemProvider(this);
		}

		return basicEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.UndevelopedEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UndevelopedEventItemProvider undevelopedEventItemProvider;

	/**
	 * This creates an adapter for a {@link fta.UndevelopedEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUndevelopedEventAdapter() {
		if (undevelopedEventItemProvider == null) {
			undevelopedEventItemProvider = new UndevelopedEventItemProvider(this);
		}

		return undevelopedEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link fta.IntermediateEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntermediateEventItemProvider intermediateEventItemProvider;

	/**
	 * This creates an adapter for a {@link fta.IntermediateEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntermediateEventAdapter() {
		if (intermediateEventItemProvider == null) {
			intermediateEventItemProvider = new IntermediateEventItemProvider(this);
		}

		return intermediateEventItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
